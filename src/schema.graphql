type Library {
	id: ID!
	name: String!
	isPrivate: Boolean!

	folders: [Folder]!
}

type Folder {
	id: ID!
	name: String!

	folders: [Folder]!
	documents: [Document]!
}

# If you want to access the contents of a document or create a new document,
# you will need to talk to the orignial ShareBase server. Checkout description
# of the Query type fore more.

type Document {
	id: ID!
	name: String!

	# The epoch time at which this document was last modified.
	modified: String!
}

# There are two parts to the ShareBase public API: the data storage and retrival
# part and the metadata management part. This API exposes the metadata part
# through a GraphQL interface. If you want to access the data storage part, talk
# directly to the official ShareBase API. The documentation for the official
# ShareBase API can be found at https://developers.sharebase.com/
#
# Authorization is handled by passing a token to the HTTP Authorization header
# of a request. You can get a token by calling the authenticate mutation. If you
# want to use the original ShareBase API for authentication, you can pass tokens
# using the PHOENIX-TOKEN scheme to this header also. All endpoints except the
# authenticate mutation require authentication.
type Query {
	me: Authed!
	libraries: [Library]!
	library(id: ID!): Library!
	folder(id: ID!): Folder!
	document(id: ID!): Document!
}

type Authed {
	# The access token. Specify this string in the token property to
	# createContext prefixed with BOX-TOKEN like so:
	#
	#   BOX-TOKEN THIS-IS-MY-TOKEN
	#
	# and you will be able to access protected resources on the server.
	token: ID!

	# The name of the currently signed in user.
	name: String!

	# The id of the currently signed in user.
	id: ID!
}

type PNXToken {
	# The phoenix token used to authenticate directly to the offical ShareBase
	# servers.
	token: ID!

	# The epoch time at which this token will no longer be valid.
	expires: Int!
}

type Share {
	id: ID!
	reference: String!

	# A url which can be used to access the shared resource.
	url: String!
}

# Setting passed when sharing folders and documents. If expiresOn and singleUse
# are unset, the share will never expire. If more than one is set, an exception
# is thrown. If none are set, the link share will never expire.
input ShareInput {
	# The epoch time at which this share will expire.
	expiresOn: Int
	singleUse: Boolean

	# A password which will be required when acessing the share. This password
	# MUST adhere to the sharebase instance's password policy. If this isn't
	# provided, a password will not be set.
	password: String

	allowView: Boolean!
	allowDownload: Boolean!
	allowUpload: Boolean!
}

type Mutation {
	# Registers your credentials with the server and creates a new session if
	# the provided credentials are valid. Credentials will be held on the server
	# until all the user's sessions are revoked. The token in the response
	# allows you to make authenticated requests with this API until the session
	# is revoked.
	authenticate(email: String!, password: String!): Authed!

	# Revokes the access token being used to make this request. If the session
	# doesn't exist, an error is thrown.
	revokeSession: Boolean!

	# Creates a new phoenix token for direct communication with the orignal
	# ShareBase API. Be careful with this token because it cannot be revoked. It
	# expires in 10 hours.
	phoenixToken: PNXToken!

	# Creates a new folder in the library at the specified path. Required parent
	# folders are created if they don't exist. The path delimiters aren't
	# specified. Try whatever you want.
	newFolder(libraryId: ID!, path: String!): Folder!
	deleteFolder(id: ID!): Boolean!
	shareFolder(id: ID!, input: ShareInput!): Share!
	revokeFolderShare(folderId: ID!, shareId: ID!): Boolean!

	shareDocument(id: ID!, input: ShareInput!): Share!
	revokeDocumentShare(documentId: ID!, shareId: ID!): Boolean!
	deleteDocument(id: ID!): Boolean!
}
