type Library {
	id: ID!
	name: String!
	isPrivate: Boolean!

	folders: [Folder]!
}

type Folder {
	id: ID!
	name: String!

	folders: [Folder]!
	documents: [Document]!
}

type Document {
	id: ID!
	name: String!
	modified: String!

	# TODO: accessing the contents
}

type Query {
	libraries: [Library]!
	library(id: ID!): Library!

	folder(id: ID!): Folder!

	document(id: ID!): Document!
}

type Authed {
	# As long as you specify this token in your requests using the the
	# Authorization header, you will be able to access resources on this server.
	token: ID!
	username: String!
	userId: ID!
	expiration: String!
}

type Mutation {
	# Registers your credentials with the server and creates a new session. This
	# allows you to make authenticated requests with the sharebase API until the
	# session is revoked.
	authenticate(username: String!, password: String!): Authed!

	# Revokes a session given sufficient authority.
	revokeSession(username: String!, password: String!, session: ID!): Boolean!

	# Creates a new phoenix token for direct communication with the real
	# sharebase API. Be careful with this token, it cannot be revoked. It
	# expires in 10 hours.
	phoenixToken: ID!

	deleteFolder(id: ID!): Boolean!

	deleteDocument(id: ID!): Boolean!
	newDocument(id: ID!): Document!
}

